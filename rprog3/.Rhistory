library(swirl)
rm(list=ls())
swirl()
c(0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect <1
tf
num_vect >= 6
q
my_char <- c("My", "name", "is")
my_char
past(my_char, collapse = " ")
paste(my_char, collapse = " ")
your_name_here
c(my_char, "your_name_here")
c(my_char, "zhou")
c(my_char, "Lethe")
info()
my_name <- c(my_char, "zhou")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = "")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
b[c(1,2,3)]
b<-c(1,2,3,4)
y <- x[!is.na(x)]
y
y[y>0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[TRUE, FALSE]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length()
length(my_vector)
dim(myvector) <- c(4,5)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
mydata <- data.frame(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c( "patient", "age", "weight", "bp", "rating",
| "test")
cnames <- c( "patient", "age", "weight", "bp", "rating",
"test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
data(makeVector.R)
source("makeVector.R")
makeVector(c(1,2,3,4,5,6))
a <- c(1,2,3,4,5,6)
makeVector(a)
makeVector$get()
makeVector$get(a)
makeVector$get
makeVector
makeVector(a)$get()
makeVector(a)$set()
makeVector(a)$getmean()
makeVector(a)$seetmean()
makeVector(a)$setmean()
makeVector()$set(a)
makeVector()
View(my_data)
rm
?rm
rm(list())
rm(ls)
rm(ls())
ls()
rm(list = ls())
source(makevector.R)
source("makevector.R")
svector <- makevector(1)
svector <- makeVector(1)
svector
svector <- makeVector(2)
svector
svector$set
svector
svector$mean
svector@setmean
svector$setmean
m
source("makevector")
source("makeVector.R")
cachemean(c(1,2,3,4))
cachemean(svector
)
svector <- makeVector(c(1,2,3,4))
svector
svector$x
svector$m
cachemean(svector)
rm(list = ls())
source("makeVector.R")
debug(makeVector)
makeVector()
makeVector(c(1,2,3,4))
debug(sv<-makeVector(c(1,2,3,4)))
sv
sv$x
sv$get
sv$get()
x
debug(sv$get())
debug(sv$get(),"test")
debug(sv$get)
sv$get()
debug(makeVector)
makeVector(c(2,4,6))
sv2 <- makeVector(c(2,4,6))
sv2
sv2$set(c(1,2,3))
sv2$get()
sv2$set(c(2,3,4))
sv2$get()
sv2$set(x)
sv2[[x]]
sv2
cachemean(sv2)
cachemean(sv2)
source(cachematrix.R)
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getInverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
source('E:/My Documents/GitHub/ProgrammingAssignment2/cachematrix.R')
source('E:/My Documents/GitHub/ProgrammingAssignment2/cachematrix.R')
ma <- matrix(1:4,coln=2,rown=2)
?matrix
matrix(data = 1:4, nrow=2, ncol=1)
ma <- matrix(data = 1:4, nrow=2, ncol=2)
ma
solve(ma)
ma2 <- makeCacheMatrix(ma)
ma2
cacheSolve(ma2)
cacheSolve(ma2)
str(str)
str(lm)
summary(str)
summary()
sumary
summary(c(1,2,3))
str(c(1,2,3))
gl()
?gl
gl(2,8)
str(gl(2,8))
gl(40,10)
summary(gl(40,10))
str(gl(40,10))
a <- rnorm(100)
summary(a)
dnorm(a)
dnorm(100)
?dnorm
dnorm(0)
dnorm(1)
dnorm(0)
dnorm(10)
pnorm(10)
qnorm(10)
pnorm(1)
pnorm(2)
pnorm(3)
pnorm(0.5)
pnorm(0.1)
pnorm(0.01)
pnorm(-1)
pnorm(-1)
dnorm(1)
dnorm(0)
pnorm(0)
qnorm(0;5)
qnorm(0.5)
sample(1:10)
systime.time(1+1)
system.time(1+1)
system.time(10!)
system.time(str(str))
source(complete.R)
source("complete.R")
complete()
complete("specdata")
system.time(complete("specdata"))
rprof(complete("specdata"))
Rprof(complete("specdata"))
Rprof(complete("specdata"))
Rprof(complete("specdata"), filename="prof")
a <- Rprof(complete("specdata")
)
?rprof
?Rprof
a <- Rprof("Rprof.txt" complete("specdata")
a <- Rprof("Rprof.txt" complete("specdata"))
Rprof("Rprof.txt" complete("specdata"))
Rprof(filename = "Rprof.txt" complete("specdata"))
Rprof(filename = "Rprof.txt")
complete("specdata")
summaryRprof("Rprof.txt")
thisfile
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
x
?rbinom
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
dir()
setwd(/rprog3)
setwd(rprog3)
setwd("/rprog3")
setwd("rprog3")
dir
dir()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
ncol(outcome)
nrow(outcome)
names(outcome)
outcome[,11] <- as.numeric(outcome[,11])
hist(outcome[,11])
a <- c("a", "b", "c")
a
"a" in a
?("a" in a)
b <- "a"
b
b in
b in a
c <- b in a
is.element(b,a)
is.element(a,b)
?stop
source("best.R")
source("best.R")
source("best.R")
source("best.R")
best("TX", "heart attack")
best("BB", "heart attack")
best("NY", "hert attack")
outcome$State
outcome.state <- outcomedata$State=="TX"
outcome.state <- outcome$State=="TX"
outcome.state
outcome.state <- outcome[outcome$State=="TX"]
outcome.state <- outcome[[outcome$State=="TX"]]
outcome.state <- subset(outcome, State=="TX")
outcome.state
head(outcome.state)
names(outcome.state)
orderoutcome <- order(-outcome.state[,11], outcome.state[,2] )
orderoutcome
orderoutcome <- order(outcome.state[,11])
orderoutcome
orderoutcome <- order(outcome.state$"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack")
orderoutcome
outcome.state[order(-dd[,11])]
outcome.state[order(-outcome.state[,11])]
outcome.state[,11]
outcome.state[with(outcome.state, order(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)]
outcome.state[with(outcome.state, order(-Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)]
name.order <- order(outcome.state$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
name.order
name.order <- order(outcome.state[,11])
name.order
outcome.state$Hospital.Name[name.order]
name.order <- order(outcome.state[,17])
outcome.state$Hospital.Name[name.order]
names(outcome)
outcome.state$State
outcome.order
View(outcome.state)
orderoutcome
outcome.state$Hospital.Name
order.name <- order(outcome.state$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
order.name
outcome.state$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure[order.name]
outcome.state$Hospital.Name[order.name]
outcome.state <- subset(outcome State=="TX")
outcome.state <- subset(outcome, State=="TX")
outcome.state$State
order.outcome <- order(as.numeric(outcome.state[,17]))
order.outcome
outcome.state$Hospital.Name[order.outcome]
order.outcome <- order(as.numeric(outcome.state[,17]), outcome.state[,2])
outcome.state$Hospital.Name[order.outcome]
order.outcome <- order(outcome.state[,2])
outcome.state$Hospital.Name[order.outcome]
order.outcome1 <- order(as.numeric(outcome.state[,17]))
order.outcome2 <- order(as.numeric(outcome.state[,17]), outcome.state[,2])
identity(order.outcome1, order.outcome2)
iden(order.outcome1, order.outcome2)
order.outcome1==order.outcome2
outcome.state$Hospital.Name[order.outcome2]
outcome.state$Hospital.Name[order.outcome1]
order.outcome2 <- order(as.numeric(outcome.state[,17]), outcome.state[,2])
source("best.R")
source("best.R")
best("TX", "heart attack")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
best("TX", "heart failure")
source("best.R")
best("MD", "heart attack")
best("MD", "pneumonia")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
2
submit()
submit()
names(outcome)
a <- c(1,2,3,4)
len(a)
length(a)
source("rankhospital.R")
source("rankhospital.R")
source("rankhospital.R")
source("rankhospital.R")
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
outcol
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
head(outcome)
utcome.state <- subset(outcome, State=="TX")
utcome.state[,17]
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
outcome <- read.csv("outcome-of-care-measures.csv")
outcome[,17]
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
submit()
submit()
submit()
submit()
names(outcome)
head(outcome,10)
names(outcome)
a <- order(outcome[,7])
a
outcome$State
order.state <- order(outcome$State)
outcome[order.state]
outcome[order.state,]
outcome$State
order.state <- order(outcome$State)
order.state
outcome$State[order.state]
outcome[order.state,]
outcome.state<- outcome[order.state,]
outcome.state$State
order.state
split(outcome.state, outcome.state$State)
outcome.state.splited <- split(outcome.state, outcome.state$State)
str(outcome.state.splited
)
outcome.state.splited[1]
head(outcome.state.splited[[1]])
names(outcome.state.splited[[1]])
length(outcome.state.splited)
outcomedata <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome.order <- order(outcomedata$State)
outcomedate <- outcomedata(outcome.order,)
outcomedata <- outcomedata[outcome.order,]
outcomedata$State
outcomedate.splited <- splite(outcomedata, outcomedata$State)
outcomedate.splited <- split(outcomedata, outcomedata$State)
names(outcomedata.splited[[1]])
names(outcomedate.splited[[1]])
names(outcomedate.splited[[2]])
names(outcomedate.splited[[1]]$State)
outcomedate.splited[[1]]$State
outcomedate.splited[[2]]$State
for i in outcomedate.splited {print(i)}
for (i in outcomedate.splited) {print(i)}
for (i in outcomedate.splited) {print(names(i))}
for (i in outcomedate.splited) {print(length(i))}
for (i in 1:46) {print(outcomedata.splited[[i]]$State)}
for (i in 1:46) {print(outcomedate.splited[[i]]$State)}
outcomedata <- subset(outcomedata, !outcomedata[,11]=="Not Available")
outcomedate.splited[[3]]$State
outcomedate.splited[[3]]$State[[1]]
character()
source("rankall.R")
rankall("heart attack", 20), 10
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
head(rankall("heart attack", 20), 10)
source("rankall.R")
rankall("heart attack", 20)
rankhospital("AK", "heart attack", 20)
source("rankhospital.R")
rankhospital("AK", "heart attack", 20)
source("rankall.R")
outcomedata <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome.order <- order(outcomedata$State)
outcomedata <- outcomedata[outcome.order,]
outcomedata <- subset(outcomedata, !outcomedata[,11]=="Not Available")
outcomedate.splited <- split(outcomedata, outcomedata$State)
outcomedate.splited[[1]]$State
outcomedate.splited[[1]][,11]
rankhospital(outcomedate.splited[[1]], 11, 20)
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
?data.frame
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
head(rankall("heart attack", 20), 10)
source("rankall.R")
tail(rankall("heart failure"), 10)
submit()
submit()
submit()
